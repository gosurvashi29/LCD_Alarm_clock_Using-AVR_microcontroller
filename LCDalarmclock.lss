
LCDalarmclock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000004b2  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000534  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000082  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6c  00000000  00000000  00000d11  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000192  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000310  00000000  00000000  00001a0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001d20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000020b  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bec  00000000  00000000  00001fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002beb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  7a:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z8disp_cmdj>:
	disp_cmd(0X06);
}

void disp_cmd(unsigned int cmd)
{
	PORTB=((cmd & 0XF0)+0X04);
  82:	9c 01       	movw	r18, r24
  84:	20 7f       	andi	r18, 0xF0	; 240
  86:	33 27       	eor	r19, r19
  88:	2c 5f       	subi	r18, 0xFC	; 252
  8a:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	e9 ef       	ldi	r30, 0xF9	; 249
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	31 97       	sbiw	r30, 0x01	; 1
  92:	f1 f7       	brne	.-4      	; 0x90 <_Z8disp_cmdj+0xe>
  94:	00 c0       	rjmp	.+0      	; 0x96 <_Z8disp_cmdj+0x14>
  96:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  98:	98 b3       	in	r25, 0x18	; 24
  9a:	94 50       	subi	r25, 0x04	; 4
  9c:	98 bb       	out	0x18, r25	; 24
	PORTB=(((cmd<<4)& 0XF0)+0X04);
  9e:	82 95       	swap	r24
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	8c 5f       	subi	r24, 0xFC	; 252
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	89 ef       	ldi	r24, 0xF9	; 249
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <_Z8disp_cmdj+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z8disp_cmdj+0x2e>
  b0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	84 50       	subi	r24, 0x04	; 4
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	08 95       	ret

000000ba <_Z8lcd_initv>:
	disp_data(0X1F);
	disp_data(0X02);
}
void lcd_init()
{
	disp_cmd(0X02);
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X28);
  c2:	88 e2       	ldi	r24, 0x28	; 40
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X0C);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_cmd(0X06);
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
  da:	08 95       	ret

000000dc <_Z9disp_datai>:
	PORTB=PORTB-0X04;
	
}
void disp_data( int cmd)
{
	PORTB=((cmd  & 0XF0)+0X05);
  dc:	9c 01       	movw	r18, r24
  de:	20 7f       	andi	r18, 0xF0	; 240
  e0:	33 27       	eor	r19, r19
  e2:	2b 5f       	subi	r18, 0xFB	; 251
  e4:	28 bb       	out	0x18, r18	; 24
  e6:	e9 ef       	ldi	r30, 0xF9	; 249
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <_Z9disp_datai+0xe>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_Z9disp_datai+0x14>
  f0:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB - 0X04;
  f2:	28 b3       	in	r18, 0x18	; 24
  f4:	24 50       	subi	r18, 0x04	; 4
  f6:	28 bb       	out	0x18, r18	; 24
	PORTB=(((cmd <<4)& 0XF0)+0X05);
  f8:	82 95       	swap	r24
  fa:	92 95       	swap	r25
  fc:	90 7f       	andi	r25, 0xF0	; 240
  fe:	98 27       	eor	r25, r24
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	98 27       	eor	r25, r24
 104:	8b 5f       	subi	r24, 0xFB	; 251
 106:	88 bb       	out	0x18, r24	; 24
 108:	89 ef       	ldi	r24, 0xF9	; 249
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <_Z9disp_datai+0x30>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z9disp_datai+0x36>
 112:	00 00       	nop
	_delay_ms(1);
	PORTB=PORTB-0X04;
 114:	88 b3       	in	r24, 0x18	; 24
 116:	84 50       	subi	r24, 0x04	; 4
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret

0000011c <_Z21special_charringbell3v>:
	disp_data(0X1F);
	disp_data(0X04);
}
void special_charringbell3()//4
{
	disp_cmd(0X60);
 11c:	80 e6       	ldi	r24, 0x60	; 96
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_data(0X04);
 124:	84 e0       	ldi	r24, 0x04	; 4
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X0E);
 12c:	8e e0       	ldi	r24, 0x0E	; 14
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X11);
 134:	81 e1       	ldi	r24, 0x11	; 17
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	
	disp_data(0X11);
 13c:	81 e1       	ldi	r24, 0x11	; 17
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X11);
 144:	81 e1       	ldi	r24, 0x11	; 17
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X1F);
 14c:	8f e1       	ldi	r24, 0x1F	; 31
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X02);
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
 15c:	08 95       	ret

0000015e <_Z21special_charringbell2v>:
	
	
}
void special_charringbell2()//3
{
	disp_cmd(0X58);
 15e:	88 e5       	ldi	r24, 0x58	; 88
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_data(0X04);
 166:	84 e0       	ldi	r24, 0x04	; 4
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X0E);
 16e:	8e e0       	ldi	r24, 0x0E	; 14
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X11);
 176:	81 e1       	ldi	r24, 0x11	; 17
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	
	disp_data(0X11);
 17e:	81 e1       	ldi	r24, 0x11	; 17
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X11);
 186:	81 e1       	ldi	r24, 0x11	; 17
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X1F);
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X04);
 196:	84 e0       	ldi	r24, 0x04	; 4
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
 19e:	08 95       	ret

000001a0 <_Z21special_charringbell1v>:

void special_charringbell1()//2
{
	
	
	disp_cmd(0X50);
 1a0:	80 e5       	ldi	r24, 0x50	; 80
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
	disp_data(0X04);
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X0E);
 1b0:	8e e0       	ldi	r24, 0x0E	; 14
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X11);
 1b8:	81 e1       	ldi	r24, 0x11	; 17
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	
	disp_data(0X11);
 1c0:	81 e1       	ldi	r24, 0x11	; 17
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X11);
 1c8:	81 e1       	ldi	r24, 0x11	; 17
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X1F);
 1d0:	8f e1       	ldi	r24, 0x1F	; 31
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	disp_data(0X08);
 1d8:	88 e0       	ldi	r24, 0x08	; 8
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
 1e0:	08 95       	ret

000001e2 <_Z11disp_stringPc>:
	PORTB=PORTB-0X04;
	
}

void disp_string( char *str)
{
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!='\0')
 1e8:	88 81       	ld	r24, Y
 1ea:	88 23       	and	r24, r24
 1ec:	39 f0       	breq	.+14     	; 0x1fc <_Z11disp_stringPc+0x1a>
	_delay_ms(1);
	PORTB=PORTB-0X04;
	
}

void disp_string( char *str)
 1ee:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (str[i]!='\0')
	{
		disp_data (str[i]);
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
}

void disp_string( char *str)
{
	int i=0;
	while (str[i]!='\0')
 1f6:	89 91       	ld	r24, Y+
 1f8:	81 11       	cpse	r24, r1
 1fa:	fa cf       	rjmp	.-12     	; 0x1f0 <_Z11disp_stringPc+0xe>
	{
		disp_data (str[i]);
		i++;
		
	}
}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <_Z8disp_numj>:

void disp_num(unsigned int num)
{
 202:	0f 93       	push	r16
 204:	1f 93       	push	r17
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	ec 01       	movw	r28, r24
	int a=0;
	if (num==0)
 20c:	00 97       	sbiw	r24, 0x00	; 0
 20e:	61 f5       	brne	.+88     	; 0x268 <_Z8disp_numj+0x66>
	{
		disp_data(48);
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
	}
	disp_cmd (0X04);
 218:	84 e0       	ldi	r24, 0x04	; 4
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 220:	28 c0       	rjmp	.+80     	; 0x272 <_Z8disp_numj+0x70>
	while (num!=0)
	{
		a=num % 10;
 222:	9e 01       	movw	r18, r28
 224:	ad ec       	ldi	r26, 0xCD	; 205
 226:	bc ec       	ldi	r27, 0xCC	; 204
 228:	0e 94 4b 02 	call	0x496	; 0x496 <__umulhisi3>
 22c:	8c 01       	movw	r16, r24
 22e:	16 95       	lsr	r17
 230:	07 95       	ror	r16
 232:	16 95       	lsr	r17
 234:	07 95       	ror	r16
 236:	16 95       	lsr	r17
 238:	07 95       	ror	r16
 23a:	98 01       	movw	r18, r16
 23c:	22 0f       	add	r18, r18
 23e:	33 1f       	adc	r19, r19
 240:	c8 01       	movw	r24, r16
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	82 0f       	add	r24, r18
 250:	93 1f       	adc	r25, r19
 252:	9e 01       	movw	r18, r28
 254:	28 1b       	sub	r18, r24
 256:	39 0b       	sbc	r19, r25
 258:	c9 01       	movw	r24, r18
		disp_data(a+48);
 25a:	c0 96       	adiw	r24, 0x30	; 48
 25c:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
		num=num/10;
 260:	e8 01       	movw	r28, r16
	if (num==0)
	{
		disp_data(48);
	}
	disp_cmd (0X04);
	while (num!=0)
 262:	20 97       	sbiw	r28, 0x00	; 0
 264:	f1 f6       	brne	.-68     	; 0x222 <_Z8disp_numj+0x20>
 266:	05 c0       	rjmp	.+10     	; 0x272 <_Z8disp_numj+0x70>
	int a=0;
	if (num==0)
	{
		disp_data(48);
	}
	disp_cmd (0X04);
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
 270:	d8 cf       	rjmp	.-80     	; 0x222 <_Z8disp_numj+0x20>
	{
		a=num % 10;
		disp_data(a+48);
		num=num/10;
	}
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <main>:
void disp_string(  char *str);
void special_charringbell1();//2
void special_charringbell2();//3
void special_charringbell3();//4
int main(void)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
 284:	2a 97       	sbiw	r28, 0x0a	; 10
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	f8 94       	cli
 28a:	de bf       	out	0x3e, r29	; 62
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	cd bf       	out	0x3d, r28	; 61
	int h1,h0,s1,s0,m1,m0;
	float k;
	DDRB = 0XFF;
 290:	8f ef       	ldi	r24, 0xFF	; 255
 292:	87 bb       	out	0x17, r24	; 23

	lcd_init();
 294:	0e 94 5d 00 	call	0xba	; 0xba <_Z8lcd_initv>
	special_charringbell1();//2
 298:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <_Z21special_charringbell1v>
	special_charringbell2();//3
 29c:	0e 94 af 00 	call	0x15e	; 0x15e <_Z21special_charringbell2v>
	 special_charringbell3();//4
 2a0:	0e 94 8e 00 	call	0x11c	; 0x11c <_Z21special_charringbell3v>
    while(1)
	{
		start:
   for(h1=0;h1<=2;h1++)
 2a4:	a1 2c       	mov	r10, r1
 2a6:	b1 2c       	mov	r11, r1
void disp_string(  char *str);
void special_charringbell1();//2
void special_charringbell2();//3
void special_charringbell3();//4
int main(void)
{
 2a8:	21 2c       	mov	r2, r1
 2aa:	31 2c       	mov	r3, r1
 2ac:	2b 82       	std	Y+3, r2	; 0x03
 2ae:	3c 82       	std	Y+4, r3	; 0x04
 2b0:	2d 82       	std	Y+5, r2	; 0x05
 2b2:	3e 82       	std	Y+6, r3	; 0x06
 2b4:	2f 82       	std	Y+7, r2	; 0x07
 2b6:	38 86       	std	Y+8, r3	; 0x08
 2b8:	29 82       	std	Y+1, r2	; 0x01
 2ba:	3a 82       	std	Y+2, r3	; 0x02
 2bc:	0f 2e       	mov	r0, r31
 2be:	fa e0       	ldi	r31, 0x0A	; 10
 2c0:	4f 2e       	mov	r4, r31
 2c2:	51 2c       	mov	r5, r1
 2c4:	f0 2d       	mov	r31, r0
 2c6:	e5 c0       	rjmp	.+458    	; 0x492 <__stack+0x33>
   for(h1=0;h1<=2;h1++)

   {
	   for(h0=0;h0<=9;h0++)
	   {
		   if(h1==2 && h0==4)
 2c8:	e2 e0       	ldi	r30, 0x02	; 2
 2ca:	ae 16       	cp	r10, r30
 2cc:	b1 04       	cpc	r11, r1
 2ce:	09 f0       	breq	.+2      	; 0x2d2 <main+0x56>
 2d0:	c8 c0       	rjmp	.+400    	; 0x462 <__stack+0x3>
 2d2:	f4 e0       	ldi	r31, 0x04	; 4
 2d4:	8f 16       	cp	r8, r31
 2d6:	91 04       	cpc	r9, r1
 2d8:	09 f4       	brne	.+2      	; 0x2dc <main+0x60>
 2da:	d8 c0       	rjmp	.+432    	; 0x48c <__stack+0x2d>
 2dc:	cb 80       	ldd	r12, Y+3	; 0x03
 2de:	dc 80       	ldd	r13, Y+4	; 0x04
 2e0:	c2 c0       	rjmp	.+388    	; 0x466 <__stack+0x7>
						   
						    
						   for (k=0;k<=9;k++)
						   {
							  
							  disp_cmd(0X80);
 2e2:	80 e8       	ldi	r24, 0x80	; 128
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
							  disp_string ( "ALARM CLOCK");
 2ea:	80 e6       	ldi	r24, 0x60	; 96
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <_Z11disp_stringPc>
							  if (  s1==0 && s0==0)
 2f2:	01 15       	cp	r16, r1
 2f4:	11 05       	cpc	r17, r1
 2f6:	d9 f5       	brne	.+118    	; 0x36e <main+0xf2>
 2f8:	e1 14       	cp	r14, r1
 2fa:	f1 04       	cpc	r15, r1
 2fc:	c1 f5       	brne	.+112    	; 0x36e <main+0xf2>
							  {

								  disp_cmd(0X8F);
 2fe:	8f e8       	ldi	r24, 0x8F	; 143
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
								  
								 disp_data(2);
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
 30e:	83 ef       	ldi	r24, 0xF3	; 243
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0x96>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x9c>
 318:	00 00       	nop
								 
								 
								 
								 //disp_cmd(0X01);
								 _delay_ms(2);
								 disp_cmd(0X8F);
 31a:	8f e8       	ldi	r24, 0x8F	; 143
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
								 disp_data(3);
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
 32a:	e3 ef       	ldi	r30, 0xF3	; 243
 32c:	f1 e0       	ldi	r31, 0x01	; 1
 32e:	31 97       	sbiw	r30, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <main+0xb2>
 332:	00 c0       	rjmp	.+0      	; 0x334 <main+0xb8>
 334:	00 00       	nop
 336:	83 ef       	ldi	r24, 0xF3	; 243
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	01 97       	sbiw	r24, 0x01	; 1
 33c:	f1 f7       	brne	.-4      	; 0x33a <main+0xbe>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <main+0xc4>
 340:	00 00       	nop
								 _delay_ms(2);
								 //disp_cmd(0X01);
								 _delay_ms(2);
								 disp_cmd(0X8F);
 342:	8f e8       	ldi	r24, 0x8F	; 143
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
								 disp_data(4);
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
 352:	e3 ef       	ldi	r30, 0xF3	; 243
 354:	f1 e0       	ldi	r31, 0x01	; 1
 356:	31 97       	sbiw	r30, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <main+0xda>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <main+0xe0>
 35c:	00 00       	nop
								 _delay_ms(2);
								 disp_cmd(0X8F);
 35e:	8f e8       	ldi	r24, 0x8F	; 143
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
								 disp_data(' ');
 366:	80 e2       	ldi	r24, 0x20	; 32
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 6e 00 	call	0xdc	; 0xdc <_Z9disp_datai>
								  
							  }
							   disp_cmd(0XC2);
 36e:	82 ec       	ldi	r24, 0xC2	; 194
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
							   disp_num(h1);
 376:	c5 01       	movw	r24, r10
 378:	0e 94 01 01 	call	0x202	; 0x202 <_Z8disp_numj>
 37c:	81 ee       	ldi	r24, 0xE1	; 225
 37e:	94 e0       	ldi	r25, 0x04	; 4
 380:	01 97       	sbiw	r24, 0x01	; 1
 382:	f1 f7       	brne	.-4      	; 0x380 <main+0x104>
 384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x10a>
 386:	00 00       	nop
							   _delay_ms(5);
							  disp_cmd(0XC3);
 388:	83 ec       	ldi	r24, 0xC3	; 195
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
							   disp_num(h0);
 390:	c4 01       	movw	r24, r8
 392:	0e 94 01 01 	call	0x202	; 0x202 <_Z8disp_numj>
 396:	e1 ee       	ldi	r30, 0xE1	; 225
 398:	f4 e0       	ldi	r31, 0x04	; 4
 39a:	31 97       	sbiw	r30, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <main+0x11e>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0x124>
 3a0:	00 00       	nop
							   _delay_ms(5);
							  disp_cmd(0XC5);
 3a2:	85 ec       	ldi	r24, 0xC5	; 197
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
							   disp_num(m1);
 3aa:	c6 01       	movw	r24, r12
 3ac:	0e 94 01 01 	call	0x202	; 0x202 <_Z8disp_numj>
 3b0:	81 ee       	ldi	r24, 0xE1	; 225
 3b2:	94 e0       	ldi	r25, 0x04	; 4
 3b4:	01 97       	sbiw	r24, 0x01	; 1
 3b6:	f1 f7       	brne	.-4      	; 0x3b4 <main+0x138>
 3b8:	00 c0       	rjmp	.+0      	; 0x3ba <main+0x13e>
 3ba:	00 00       	nop
							   _delay_ms(5);
							 disp_cmd(0XC6);
 3bc:	86 ec       	ldi	r24, 0xC6	; 198
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
							   disp_num(m0);
 3c4:	c3 01       	movw	r24, r6
 3c6:	0e 94 01 01 	call	0x202	; 0x202 <_Z8disp_numj>
 3ca:	e1 ee       	ldi	r30, 0xE1	; 225
 3cc:	f4 e0       	ldi	r31, 0x04	; 4
 3ce:	31 97       	sbiw	r30, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <main+0x152>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <main+0x158>
 3d4:	00 00       	nop
							   _delay_ms(5);
							disp_cmd(0XC8);
 3d6:	88 ec       	ldi	r24, 0xC8	; 200
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
							  disp_num(s1);
 3de:	c8 01       	movw	r24, r16
 3e0:	0e 94 01 01 	call	0x202	; 0x202 <_Z8disp_numj>
 3e4:	81 ee       	ldi	r24, 0xE1	; 225
 3e6:	94 e0       	ldi	r25, 0x04	; 4
 3e8:	01 97       	sbiw	r24, 0x01	; 1
 3ea:	f1 f7       	brne	.-4      	; 0x3e8 <main+0x16c>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <main+0x172>
 3ee:	00 00       	nop
							   _delay_ms(5);
							   disp_cmd(0XC9);
 3f0:	89 ec       	ldi	r24, 0xC9	; 201
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 41 00 	call	0x82	; 0x82 <_Z8disp_cmdj>
							   disp_num(s0);
 3f8:	c7 01       	movw	r24, r14
 3fa:	0e 94 01 01 	call	0x202	; 0x202 <_Z8disp_numj>
 3fe:	e3 ef       	ldi	r30, 0xF3	; 243
 400:	f1 e0       	ldi	r31, 0x01	; 1
 402:	31 97       	sbiw	r30, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <main+0x186>
 406:	00 c0       	rjmp	.+0      	; 0x408 <main+0x18c>
 408:	00 00       	nop
 40a:	89 85       	ldd	r24, Y+9	; 0x09
 40c:	9a 85       	ldd	r25, Y+10	; 0x0a
 40e:	01 97       	sbiw	r24, 0x01	; 1
 410:	9a 87       	std	Y+10, r25	; 0x0a
 412:	89 87       	std	Y+9, r24	; 0x09
				   {
					   for(s0=0;s0<=9;s0++)
					   {
						   
						    
						   for (k=0;k<=9;k++)
 414:	89 2b       	or	r24, r25
 416:	09 f0       	breq	.+2      	; 0x41a <main+0x19e>
 418:	64 cf       	rjmp	.-312    	; 0x2e2 <main+0x66>
				   
				   
				   
				   for(s1=0;s1<=5;s1++)
				   {
					   for(s0=0;s0<=9;s0++)
 41a:	9f ef       	ldi	r25, 0xFF	; 255
 41c:	e9 1a       	sub	r14, r25
 41e:	f9 0a       	sbc	r15, r25
 420:	ea e0       	ldi	r30, 0x0A	; 10
 422:	ee 16       	cp	r14, r30
 424:	f1 04       	cpc	r15, r1
 426:	19 f0       	breq	.+6      	; 0x42e <main+0x1b2>
void disp_string(  char *str);
void special_charringbell1();//2
void special_charringbell2();//3
void special_charringbell3();//4
int main(void)
{
 428:	5a 86       	std	Y+10, r5	; 0x0a
 42a:	49 86       	std	Y+9, r4	; 0x09
 42c:	5a cf       	rjmp	.-332    	; 0x2e2 <main+0x66>
			   for(m0=0;m0<=9;m0++)
			   {
				   
				   
				   
				   for(s1=0;s1<=5;s1++)
 42e:	0f 5f       	subi	r16, 0xFF	; 255
 430:	1f 4f       	sbci	r17, 0xFF	; 255
 432:	06 30       	cpi	r16, 0x06	; 6
 434:	11 05       	cpc	r17, r1
 436:	19 f0       	breq	.+6      	; 0x43e <main+0x1c2>
void disp_string(  char *str);
void special_charringbell1();//2
void special_charringbell2();//3
void special_charringbell3();//4
int main(void)
{
 438:	e9 80       	ldd	r14, Y+1	; 0x01
 43a:	fa 80       	ldd	r15, Y+2	; 0x02
 43c:	f5 cf       	rjmp	.-22     	; 0x428 <main+0x1ac>
		   {
			   goto start;
		   }
		   for(m1=0;m1<=5;m1++)
		   {
			   for(m0=0;m0<=9;m0++)
 43e:	ff ef       	ldi	r31, 0xFF	; 255
 440:	6f 1a       	sub	r6, r31
 442:	7f 0a       	sbc	r7, r31
 444:	8a e0       	ldi	r24, 0x0A	; 10
 446:	68 16       	cp	r6, r24
 448:	71 04       	cpc	r7, r1
 44a:	19 f0       	breq	.+6      	; 0x452 <main+0x1d6>
void disp_string(  char *str);
void special_charringbell1();//2
void special_charringbell2();//3
void special_charringbell3();//4
int main(void)
{
 44c:	0f 81       	ldd	r16, Y+7	; 0x07
 44e:	18 85       	ldd	r17, Y+8	; 0x08
 450:	f3 cf       	rjmp	.-26     	; 0x438 <main+0x1bc>
	   {
		   if(h1==2 && h0==4)
		   {
			   goto start;
		   }
		   for(m1=0;m1<=5;m1++)
 452:	9f ef       	ldi	r25, 0xFF	; 255
 454:	c9 1a       	sub	r12, r25
 456:	d9 0a       	sbc	r13, r25
 458:	e6 e0       	ldi	r30, 0x06	; 6
 45a:	ce 16       	cp	r12, r30
 45c:	d1 04       	cpc	r13, r1
 45e:	19 f4       	brne	.+6      	; 0x466 <__stack+0x7>
 460:	05 c0       	rjmp	.+10     	; 0x46c <__stack+0xd>
   for(h1=0;h1<=2;h1++)

   {
	   for(h0=0;h0<=9;h0++)
	   {
		   if(h1==2 && h0==4)
 462:	cb 80       	ldd	r12, Y+3	; 0x03
 464:	dc 80       	ldd	r13, Y+4	; 0x04
void disp_string(  char *str);
void special_charringbell1();//2
void special_charringbell2();//3
void special_charringbell3();//4
int main(void)
{
 466:	6d 80       	ldd	r6, Y+5	; 0x05
 468:	7e 80       	ldd	r7, Y+6	; 0x06
 46a:	f0 cf       	rjmp	.-32     	; 0x44c <main+0x1d0>
	{
		start:
   for(h1=0;h1<=2;h1++)

   {
	   for(h0=0;h0<=9;h0++)
 46c:	ff ef       	ldi	r31, 0xFF	; 255
 46e:	8f 1a       	sub	r8, r31
 470:	9f 0a       	sbc	r9, r31
 472:	8a e0       	ldi	r24, 0x0A	; 10
 474:	88 16       	cp	r8, r24
 476:	91 04       	cpc	r9, r1
 478:	09 f0       	breq	.+2      	; 0x47c <__stack+0x1d>
 47a:	26 cf       	rjmp	.-436    	; 0x2c8 <main+0x4c>
	special_charringbell2();//3
	 special_charringbell3();//4
    while(1)
	{
		start:
   for(h1=0;h1<=2;h1++)
 47c:	9f ef       	ldi	r25, 0xFF	; 255
 47e:	a9 1a       	sub	r10, r25
 480:	b9 0a       	sbc	r11, r25
 482:	e3 e0       	ldi	r30, 0x03	; 3
 484:	ae 16       	cp	r10, r30
 486:	b1 04       	cpc	r11, r1
 488:	1c f4       	brge	.+6      	; 0x490 <__stack+0x31>
 48a:	03 c0       	rjmp	.+6      	; 0x492 <__stack+0x33>
 48c:	51 01       	movw	r10, r2
 48e:	01 c0       	rjmp	.+2      	; 0x492 <__stack+0x33>
 490:	51 01       	movw	r10, r2
void disp_string(  char *str);
void special_charringbell1();//2
void special_charringbell2();//3
void special_charringbell3();//4
int main(void)
{
 492:	41 01       	movw	r8, r2
 494:	19 cf       	rjmp	.-462    	; 0x2c8 <main+0x4c>

00000496 <__umulhisi3>:
 496:	a2 9f       	mul	r26, r18
 498:	b0 01       	movw	r22, r0
 49a:	b3 9f       	mul	r27, r19
 49c:	c0 01       	movw	r24, r0
 49e:	a3 9f       	mul	r26, r19
 4a0:	01 d0       	rcall	.+2      	; 0x4a4 <__umulhisi3+0xe>
 4a2:	b2 9f       	mul	r27, r18
 4a4:	70 0d       	add	r23, r0
 4a6:	81 1d       	adc	r24, r1
 4a8:	11 24       	eor	r1, r1
 4aa:	91 1d       	adc	r25, r1
 4ac:	08 95       	ret

000004ae <_exit>:
 4ae:	f8 94       	cli

000004b0 <__stop_program>:
 4b0:	ff cf       	rjmp	.-2      	; 0x4b0 <__stop_program>
